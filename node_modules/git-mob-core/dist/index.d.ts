import { Author } from './git-mob-api/author.js';
import { localTemplate, fetchFromGitHub, getSetCoAuthors } from './git-mob-api/git-mob-config.js';
import { getLocalCommitTemplate, getGlobalCommitTemplate } from './git-mob-api/git-config.js';
import { insideWorkTree, topLevelDirectory } from './git-mob-api/git-rev-parse.js';
declare function getAllAuthors(): Promise<Author[]>;
declare function setCoAuthors(keys: string[]): Promise<Author[]>;
declare function updateGitTemplate(selectedAuthors?: Author[]): Promise<void>;
declare function getSelectedCoAuthors(allAuthors: Author[]): Promise<Author[]>;
declare function solo(): Promise<void>;
declare function getPrimaryAuthor(): Promise<Author | undefined>;
declare function setPrimaryAuthor(author: Author): Promise<void>;
export { getAllAuthors, getPrimaryAuthor, getSelectedCoAuthors, setCoAuthors, setPrimaryAuthor, solo, updateGitTemplate, };
export declare const gitMobConfig: {
    localTemplate: typeof localTemplate;
    fetchFromGitHub: typeof fetchFromGitHub;
    getSetCoAuthors: typeof getSetCoAuthors;
};
export declare const gitConfig: {
    getLocalCommitTemplate: typeof getLocalCommitTemplate;
    getGlobalCommitTemplate: typeof getGlobalCommitTemplate;
};
export declare const gitRevParse: {
    insideWorkTree: typeof insideWorkTree;
    topLevelDirectory: typeof topLevelDirectory;
};
export { saveNewCoAuthors } from './git-mob-api/manage-authors/add-new-coauthor.js';
export { createCoAuthorsFile } from './git-mob-api/git-authors/create-coauthors-file.js';
export { repoAuthorList } from './git-mob-api/git-authors/repo-author-list.js';
export { pathToCoAuthors } from './git-mob-api/git-authors/index.js';
export { fetchGitHubAuthors, searchGitHubAuthors, } from './git-mob-api/git-authors/fetch-github-authors.js';
export { getConfig, updateConfig } from './config-manager.js';
export { Author } from './git-mob-api/author.js';
export { messageFormatter } from './git-mob-api/git-message/message-formatter.js';
